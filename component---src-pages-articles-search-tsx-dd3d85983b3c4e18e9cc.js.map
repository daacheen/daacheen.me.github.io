{"version":3,"sources":["webpack://ddadaal.me/./src/pages/articles/search.tsx"],"names":["root","prefix","locationStore","useStore","LocationStore","metadataStore","MetadataStore","i18n","useI18n","query","page","pageIndex","searchResult","Array","from","articleIdMap","values","filter","articles","some","article","frontmatter","title","toUpperCase","includes","tags","tag","getAllVariationsOfTag","existingTag","sort","a","b","Date","date","getTime","totalCount","length","pageCount","Math","ceil","slice","translate","id","args","key","ids","map","x","toPage","pageNum","path","encodeURIComponent","navigate"],"mappings":"kNAUMA,GAAOC,QAAO,WA6FpB,UApF6B,WAE3B,IAAMC,GAAgBC,QAASC,KACzBC,GAAgBF,QAASG,KACzBC,GAAOC,UAEb,EAA4BN,EAAcO,MAAlCA,EAAR,EAAQA,MAAR,IAAeC,YAAf,MAAsB,EAAtB,EAEMC,EAAYD,EAAO,EAErBE,EAAeC,MAAMC,KAAKT,EAAcU,aAAaC,UAErDP,IACFG,EAAeA,EAAaK,QAAO,SAACC,GAElC,QAAIA,EAASC,MAAK,SAACC,GAAD,OAChBA,EAAQC,YAAYC,MAAMC,cAAcC,SAASf,EAAMc,qBAKrDL,EAASC,MAAK,SAACC,GAAD,OACa,OAA7BA,EAAQC,YAAYI,MACjBL,EAAQC,YAAYI,KAAKN,MAAM,SAACO,GAAD,OAChCrB,EAAcsB,sBAAsBD,GAAKP,MAAK,SAACS,GAAD,OAC5CA,EAAYL,cAAcC,SAASf,EAAMc,4BAYnDX,EAAaiB,MAAK,SAACC,EAAGC,GAAJ,OAChB,IAAIC,KAAKD,EAAE,GAAGV,YAAYY,MAAMC,UAC/B,IAAIF,KAAKF,EAAE,GAAGT,YAAYY,MAAMC,aAEnC,IAAMC,EAAavB,EAAawB,OAE1BC,EAAYC,KAAKC,KAAKJ,EA7Cb,GAqDf,OALAvB,EAAeA,EAAa4B,MAhDb,EAiDb7B,EAjDa,EAkDbA,EAlDa,GAsDb,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEW,MAAOf,EAAKkC,UAAUzC,EAAK,SAAU,CAACS,MAExC,0BACE,gBAAC,KAAD,CAAWiC,GAAI1C,EAAK,SAAU2C,KAAM,CAClC,0BAAQC,IAAK,SAAUnC,OAI3B,6BACE,gBAAC,KAAD,CAAWiC,GAAI1C,EAAK,QAAS2C,KAAM,CACjCR,MAIJ,2BACA,gBAAC,IAAD,CACEU,IAAKjC,EAAakC,KAAI,SAACC,GAAD,OAAOA,EAAE,GAAG1B,YAAYqB,MAC9CL,UAAWA,EACX1B,UAAWD,EAAO,EAClBsC,OAAQ,SAACC,GACP,IAEMC,EAAI,qBADO,SADIC,mBAAmB1C,GAAS,IAChC,UAAiCwC,EAAU,IAE5D,OAAO,kBAAMG,cAASF","file":"component---src-pages-articles-search-tsx-dd3d85983b3c4e18e9cc.js","sourcesContent":["import React from \"react\";\nimport { Localized, prefix, useI18n } from \"@/i18n\";\nimport LocationStore from \"@/stores/LocationStore\";\nimport MetadataStore from \"@/stores/MetadataStore\";\nimport { navigate } from \"gatsby\";\nimport ArticleItemList from \"@/components/Article/ArticleItemList\";\nimport ArticleListLayout from \"@/layouts/ArticleListLayout\";\nimport { useStore } from \"simstate\";\nimport { PageMetadata } from \"@/components/PageMetadata\";\n\nconst root = prefix(\"search.\");\n\ninterface Query {\n  query?: string;\n  page?: number;\n}\n\nconst pageSize = 5;\n\nconst SearchPage: React.FC = () => {\n\n  const locationStore = useStore(LocationStore);\n  const metadataStore = useStore(MetadataStore);\n  const i18n = useI18n();\n\n  const { query, page = 1 } = locationStore.query as Query;\n\n  const pageIndex = page - 1;\n\n  let searchResult = Array.from(metadataStore.articleIdMap.values());\n\n  if (query) {\n    searchResult = searchResult.filter((articles) => {\n      // filter according to title\n      if (articles.some((article) =>\n        article.frontmatter.title.toUpperCase().includes(query.toUpperCase()))) {\n        return true;\n      }\n\n      // filter according to tag\n      if (articles.some((article) =>\n        article.frontmatter.tags !== null // article has tags\n        && article.frontmatter.tags.some(((tag) => // one of the tag satisfies:\n          metadataStore.getAllVariationsOfTag(tag).some((existingTag) =>\n            existingTag.toUpperCase().includes(query.toUpperCase()),\n          )\n        )),\n      )) {\n        return true;\n      }\n\n      // add more filters here\n      return false;\n    });\n  }\n\n  searchResult.sort((a, b) =>\n    new Date(b[0].frontmatter.date).getTime() -\n     new Date(a[0].frontmatter.date).getTime());\n\n  const totalCount = searchResult.length;\n\n  const pageCount = Math.ceil(totalCount / pageSize);\n\n  // pagination\n  searchResult = searchResult.slice(\n    pageIndex * pageSize,\n    pageIndex * pageSize + pageSize\n  );\n\n  return (\n    <ArticleListLayout>\n      <PageMetadata\n        title={i18n.translate(root(\"title\"), [query]) as string}\n      />\n      <h3>\n        <Localized id={root(\"title\")} args={[\n          <strong key={\"query\"}>{query}</strong>,\n        ]}\n        />\n      </h3>\n      <small>\n        <Localized id={root(\"info\")} args={[\n          totalCount,\n        ]}\n        />\n      </small>\n      <hr />\n      <ArticleItemList\n        ids={searchResult.map((x) => x[0].frontmatter.id)}\n        pageCount={pageCount}\n        pageIndex={page - 1}\n        toPage={(pageNum) => {\n          const queryEncoded = encodeURIComponent(query || \"\");\n          const querystring = `query=${queryEncoded}&page=${pageNum + 1}`;\n          const path = `/articles/search?${querystring}`;\n          return () => navigate(path);\n        }}\n      />\n    </ArticleListLayout>\n  );\n};\n\nexport default SearchPage;\n"],"sourceRoot":""}