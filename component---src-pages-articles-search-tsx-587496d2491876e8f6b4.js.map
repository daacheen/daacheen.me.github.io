{"version":3,"sources":["webpack:///./src/pages/articles/search.tsx"],"names":["root","lang","search","SearchPage","locationStore","useStore","LocationStore","metadataStore","MetadataStore","query","page","pageIndex","searchResult","Array","from","articleIdMap","values","filter","articles","some","article","frontmatter","title","toUpperCase","includes","tags","tag","getAllVariationsOfTag","existingTag","sort","a","b","Date","date","getTime","totalCount","length","pageCount","Math","ceil","slice","titleId","id","replacements","key","info","ids","map","x","toPage","pageNum","path","encodeURIComponent","navigate"],"mappings":"oUAWMA,EAAOC,IAAKC,OAkFHC,UAzEc,WAE3B,IAAMC,EAAgBC,YAASC,KACzBC,EAAgBF,YAASG,KAHE,EAKLJ,EAAcK,MAAlCA,EALyB,EAKzBA,MALyB,IAKlBC,YALkB,MAKX,EALW,EAO3BC,EAAYD,EAAO,EAErBE,EAAeC,MAAMC,KAAKP,EAAcQ,aAAaC,UAErDP,IACFG,EAAeA,EAAaK,QAAO,SAACC,GAElC,QAAIA,EAASC,MAAK,SAACC,GAAD,OAAaA,EAAQC,YAAYC,MAAMC,cAAcC,SAASf,EAAMc,qBAKlFL,EAASC,MAAK,SAACC,GAAD,OACa,OAA7BA,EAAQC,YAAYI,MACjBL,EAAQC,YAAYI,KAAKN,MAAM,SAACO,GAAD,OAChCnB,EAAcoB,sBAAsBD,GAAKP,MAAK,SAACS,GAAD,OAC5CA,EAAYL,cAAcC,SAASf,EAAMc,4BAYnDX,EAAaiB,MAAK,SAACC,EAAGC,GAAJ,OAAU,IAAIC,KAAKD,EAAE,GAAGV,YAAYY,MAAMC,UAAY,IAAIF,KAAKF,EAAE,GAAGT,YAAYY,MAAMC,aAExG,IAAMC,EAAavB,EAAawB,OAE1BC,EAAYC,KAAKC,KAAKJ,EAzCb,GA8Cf,OAFAvB,EAAeA,EAAa4B,MA5Cb,EA4CmB7B,EA5CnB,EA4CyCA,EA5CzC,GA+Cb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE8B,QAASzC,EAAKsB,QAEhB,4BACE,kBAAC,IAAD,CAAiBoB,GAAI1C,EAAKsB,MAAOqB,aAAc,CAC7C,4BAAQC,IAAK,SAAUnC,OAG3B,+BACE,kBAAC,IAAD,CAAiBiC,GAAI1C,EAAK6C,KAAMF,aAAc,CAC5CR,MAGJ,6BACA,kBAAC,IAAD,CACEW,IAAKlC,EAAamC,KAAI,SAACC,GAAD,OAAOA,EAAE,GAAG3B,YAAYqB,MAC9CL,UAAWA,EACX1B,UAAWD,EAAO,EAClBuC,OAAQ,SAACC,GACP,IAAMC,EAAO,0BAA0BC,mBAAmB3C,GAAS,IAAzD,UAAqEyC,EAAU,GACzF,OAAO,kBAAMG,mBAASF","file":"component---src-pages-articles-search-tsx-587496d2491876e8f6b4.js","sourcesContent":["import React from \"react\";\nimport LocalizedString from \"@/i18n/LocalizedString\";\nimport lang from \"@/i18n/lang\";\nimport LocationStore from \"@/stores/LocationStore\";\nimport MetadataStore from \"@/stores/MetadataStore\";\nimport { navigate } from \"gatsby\";\nimport ArticleItemList from \"@/components/Article/ArticleItemList\";\nimport ArticleListLayout from \"@/layouts/ArticleListLayout\";\nimport { useStore } from \"simstate\";\nimport { PageMetadata } from \"@/components/PageMetadata\";\n\nconst root = lang.search;\n\ninterface Query {\n  query?: string;\n  page?: number;\n}\n\nconst pageSize = 5;\n\nconst SearchPage: React.FC = () => {\n\n  const locationStore = useStore(LocationStore);\n  const metadataStore = useStore(MetadataStore);\n\n  const { query, page = 1 } = locationStore.query as Query;\n\n  const pageIndex = page - 1;\n\n  let searchResult = Array.from(metadataStore.articleIdMap.values());\n\n  if (query) {\n    searchResult = searchResult.filter((articles) => {\n      // filter according to title\n      if (articles.some((article) => article.frontmatter.title.toUpperCase().includes(query.toUpperCase()))) {\n        return true;\n      }\n\n      // filter according to tag\n      if (articles.some((article) =>\n        article.frontmatter.tags !== null // article has tags\n        && article.frontmatter.tags.some(((tag) => // one of the tag satisfies:\n          metadataStore.getAllVariationsOfTag(tag).some((existingTag) =>\n            existingTag.toUpperCase().includes(query.toUpperCase()),\n          )\n        )),\n      )) {\n        return true;\n      }\n\n      // add more filters here\n      return false;\n    });\n  }\n\n  searchResult.sort((a, b) => new Date(b[0].frontmatter.date).getTime() - new Date(a[0].frontmatter.date).getTime());\n\n  const totalCount = searchResult.length;\n\n  const pageCount = Math.ceil(totalCount / pageSize);\n\n  // pagination\n  searchResult = searchResult.slice(pageIndex * pageSize, pageIndex * pageSize + pageSize);\n\n  return (\n    <ArticleListLayout>\n      <PageMetadata\n        titleId={root.title}\n      />\n      <h3>\n        <LocalizedString id={root.title} replacements={[\n          <strong key={\"query\"}>{query}</strong>,\n        ]} />\n      </h3>\n      <small>\n        <LocalizedString id={root.info} replacements={[\n          totalCount,\n        ]} />\n      </small>\n      <hr />\n      <ArticleItemList\n        ids={searchResult.map((x) => x[0].frontmatter.id)}\n        pageCount={pageCount}\n        pageIndex={page - 1}\n        toPage={(pageNum) => {\n          const path = `/articles/search?query=${encodeURIComponent(query || \"\")}&page=${pageNum + 1}`;\n          return () => navigate(path);\n        }}\n      />\n    </ArticleListLayout>\n  );\n}\n\nexport default SearchPage;\n"],"sourceRoot":""}